name: Update Geofabrik Data

on:
  workflow_dispatch: # run manually

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # Install Python requirements
      - name: Install Python requirements
        run: pip install -r requirements.txt

      # Get latest Geofabrik date
      - name: Get Geofabrik date
        id: geofabrik-date
        run: |
          DATE=$(python scripts/geofabrik.py)
          echo "date=$DATE" >> $GITHUB_OUTPUT

      - name: Debug print
        run: echo "Latest date is ${{ steps.geofabrik-date.outputs.date }}"

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y osmium-tool gdal-bin

      # Try to restore cached file first
      - name: Cache Geofabrik file
        id: geofabrik-cache
        uses: actions/cache@v4
        with:
          path: .cache/geofabrik/belgium-latest.osm.pbf
          key: belgium-${{ steps.geofabrik-date.outputs.date }}
          restore-keys: |
            belgium-

      # Download Geofabrik file only if cache was missed
      - name: Download Geofabrik file if needed
        if: steps.geofabrik-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/geofabrik
          echo "[INFO] Downloading Belgium OSM PBF"
          curl -L "https://download.geofabrik.de/europe/belgium-${{ steps.geofabrik-date.outputs.date }}.osm.pbf" \
              -o ".cache/geofabrik/belgium-latest.osm.pbf"
          echo "[INFO] Download complete"

      # Save the newly downloaded file to the cache
      - name: Save Geofabrik file to cache
        if: steps.geofabrik-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: .cache/geofabrik/belgium-latest.osm.pbf
          key: belgium-${{ steps.geofabrik-date.outputs.date }}

      # Run preprocessing script
      - name: Run Bash preprocessing
        run: |
          bash scripts/process_osm.sh ${{ steps.geofabrik-date.outputs.date }} .cache/geofabrik/belgium-latest.osm.pbf
        
      # Run processing script
      - name: Run Python processing
        run: |
          python scripts/process_data.py .cache/geofabrik/belgium-latest.osm.pbf

      # Update DATA_VERSION.txt next to outputs
      - name: Update DATA_VERSION.txt
        run: |
          mkdir -p data/geojson
          echo "${{ steps.geofabrik-date.outputs.date }}" > data/geojson/DATA_VERSION.txt

      # Commit changes and create PR
      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          # numeric ID corresponds to repositoryâ€™s GitHub account
          git config user.email "17805076+github-actions[bot]@users.noreply.github.com"

          BRANCH="update-data-${{ steps.geofabrik-date.outputs.date }}"
          git checkout -b "$BRANCH"

          git add data/geojson/
          git commit -m "Update data to version ${{ steps.geofabrik-date.outputs.date }}" || echo "No changes to commit"
          git push origin "$BRANCH" || echo "Branch already exists"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          branch: update-data-${{ steps.geofabrik-date.outputs.date }}
          title: "Update data to ${{ steps.geofabrik-date.outputs.date }}"
          body: "Automated data update from Geofabrik."
          commit-message: "Update data to version ${{ steps.geofabrik-date.outputs.date }}"
