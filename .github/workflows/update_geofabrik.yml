name: Update Geofabrik Data

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Choose update mode"
        required: true
        default: "use-outcome" # also used for scheduled run
        type: choice
        options:
          - use-outcome
          - ignore-outcome
  # schedule:
  #   - cron: '0 2 * * 1' # weekly

jobs:
  check-latest:
    runs-on: ubuntu-latest
    outputs:
      update_needed: ${{ steps.compare.outputs.update_needed }}
      latest_date: ${{ steps.get_latest.outputs.latest }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get current DATA_VERSION
        id: get_current
        run: |
          if [ -f data/geojson/DATA_VERSION.txt ]; then
            CURRENT=$(cat data/geojson/DATA_VERSION.txt)
          else
            CURRENT=0
          fi
          echo "current=$CURRENT" >> $GITHUB_OUTPUT

      - name: Get latest Geofabrik date
        id: get_latest
        run: |
          DATE=$(python scripts/geofabrik_date.py)
          echo "latest=$DATE" >> $GITHUB_OUTPUT

      - name: Compare dates
        id: compare
        run: |
          if [ "${{ steps.get_latest.outputs.latest }}" -gt "${{ steps.get_current.outputs.current }}" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Print dates
        run: |
          echo "Current DATA_VERSION: ${{ steps.get_current.outputs.current }}"
          echo "Latest Geofabrik date: ${{ steps.get_latest.outputs.latest }}"
  
  update-data:
    runs-on: ubuntu-latest
    needs: check-latest
    if: ${{ github.event.inputs.mode == 'ignore-outcome' || needs.check-latest.outputs.update_needed == 'true' }}
    steps:
      # Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install Python requirements
      - name: Install Python requirements
        run: pip install -r requirements.txt

      # Install system dependencies
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y osmium-tool gdal-bin

      # Restore & cache Geofabrik file
      - name: Restore & cache Geofabrik file
        id: geofabrik-cache
        uses: actions/cache@v4
        with:
          path: .cache/geofabrik/belgium-latest.osm.pbf
          key: belgium-${{ needs.check-latest.outputs.latest_date }}

      # Download Geofabrik file only if cache was missed
      - name: Download Geofabrik file if needed
        if: steps.geofabrik-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p .cache/geofabrik
          echo "[INFO] Downloading Belgium OSM PBF"
          curl -L "https://download.geofabrik.de/europe/belgium-${{ needs.check-latest.outputs.latest_date }}.osm.pbf" \
              -o ".cache/geofabrik/belgium-latest.osm.pbf"
          echo "[INFO] Download complete"

      # # Save the newly downloaded file to the cache
      # - name: Save Geofabrik file to cache
      #   if: steps.geofabrik-cache.outputs.cache-hit != 'true'
      #   uses: actions/cache@v4
      #   with:
      #     path: .cache/geofabrik/belgium-latest.osm.pbf
      #     key: belgium-${{ needs.check-latest.outputs.latest_date }}

      # Run preprocessing script
      - name: Run Bash preprocessing
        run: |
          bash scripts/geofabrik_preprocessing.sh ${{ needs.check-latest.outputs.latest_date }} .cache/geofabrik/belgium-latest.osm.pbf
        
      # Run processing script
      - name: Run Python processing
        run: |
          python -m scripts.geofabrik_processing

      # Update data version
      - name: Update data version file
        run: |
          mkdir -p data/geojson
          echo "${{ needs.check-latest.outputs.latest_date }}" > data/geojson/DATA_VERSION.txt

      # Commit changes and create Pull Request (idempotent)
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PAT_FOR_PR }}
          branch: update-data-${{ needs.check-latest.outputs.latest_date }}
          base: main
          title: "Update data to ${{ needs.check-latest.outputs.latest_date }}"
          body: "Automated data update from Geofabrik."
          commit-message: "Update data to version ${{ needs.check-latest.outputs.latest_date }}"
          